_model: sprints
---
title: Sprints at EuroSciPy 2025
---
body:

### What are Sprints?

Sprints are collaborative coding sessions where participants work together on
open-source projects. It's a great opportunity to contribute to projects you
use, learn from experienced developers, and network with the community.

### When are Sprints happening?

Sprints at EuroSciPy 2025 will be held on **Friday, 22 August 2025**.

**No ticket is required to attend the sprints; they are open to everyone!**

## Registered Sprints

<!--
### How to register your sprint:

To add your sprint to this page, please follow these steps:

1.  **Fork the repository:** Go to the EuroSciPy website repository on GitHub
    and click the "Fork" button.
2.  **Clone your fork:** Clone your forked repository to your local machine:
    `git clone https://github.com/YOUR_USERNAME/euroscipy.github.io.git`
3.  **Create a new branch:** Navigate into your cloned repository and create a
    new branch for your changes:
    `git switch --create add-my-sprint`
4.  **Edit this file:** Open `content/sprints/contents.lr` in your text editor.
5.  **Add your sprint:** Add a new section for your sprint under "Registered
    Sprints" using a `###` heading, followed by a short description.
    Example:
    ```
    ### My Awesome Project Sprint

    This sprint will focus on improving the documentation and adding new
    features to My Awesome Project.
    ```
6.  **Commit your changes:** Save the file and commit your changes:
    `git add content/sprints/contents.lr`
    `git commit -m "Add My Awesome Project sprint"`
7.  **Push your branch:** Push your new branch to your forked repository on
    GitHub:
    `git push origin add-my-sprint`
8.  **Open a Pull Request (PR):** Go to your forked repository on GitHub and
    open a Pull Request from your new branch to the `main` branch of the
    original `euroscipy/euroscipy.github.io` repository.
9.  Once your PR is approved and merged, your sprint will appear on this page.

For more details on how to propose a sprint, please read our blog post:
[Sprints Registration Open!](/blog/sprints-registration-open/)
-->

### NumPy

TBA

### SciPy

* [SciPy](https://scipy.org/) is completely Free and Open Source, and provides fundamental and foundational algorithms for the Scientific Python ecosystem.
* Please checkout the [Contributor Guidelines](https://github.com/scipy/scipy/blob/f762ab3dddf1541da7475580f16d5a4b8da31fea/CONTRIBUTING.rst) for tips and more links on how to contribute.
* Please see the [Good First Issue](https://github.com/scipy/scipy/contribute) for issues which can be contributed to (more) easily.
* If you have any specific interests, please reach out to one of the hosts. We can help point you in the right direction.

### scikit-learn

* [scikit-learn](https://scikit-learn.org) is a Python library to solve machine learning problem.
* Please checkout the [Contributor Guidelines](https://scikit-learn.org/dev/developers/index.html) for tips and more links.
* Talk to us such that we can direct you towards a good issues to solve.
* Mentors will leave for the airports at the beginning of the afternoon.

### skrub

* [skrub](https://skrub-data.org) is a Python library to bring machine learning in the dataframe world.
* Please checkout the [Contributor Guidelines](https://skrub-data.org/stable/development.html) for tips and more links.
* Talk to us such that we can direct you towards a good issues to solve.
* Mentors will leave for the airports at the beginning of the afternoon.

### scikit-image

TBA

### napari

<!--
TBA (our propositions)
-->

- whatever you want to be improved in napari :)

[napari](https://github.com/napari/napari) is a fast, interactive,
multi-dimensional image viewer for Python.


### PyFixest

We'd love to implement a range of exciting new features for PyFixest during the EuroScipy sprint:

We are currently porting some of the core algorithms that make PyFixest fast from numba to Rust and would like to implement multiple enhancements:

- Implement the Irons-Tuck Fixed-Point Acceleration Method in PyFixest, plus some other tricks that make r-fixest so fast ([Background on IT](https://cea.hal.science/cea-01403292/document), [fixest IT options](https://lrberge.github.io/fixest/reference/demeaning_algo.html), [pyfixest draft PR](https://github.com/py-econometrics/pyfixest/issues/357)).
- We want to port the Frisch-Newton Quantile Regression solver from PyFixest from pure Python / numpy to Rust. You can find the code [here](https://github.com/py-econometrics/pyfixest/blob/master/pyfixest/estimation/quantreg/frisch_newton_ip.py#L70).
- We'd like core functionality of the randomization inference code base from numba to Rust. You can find the code [here](https://github.com/py-econometrics/pyfixest/blob/49d65a426ddc3311632ed69d77762ea344574533/pyfixest/estimation/ritest.py#L196).

If you don't know Rust, don't worry! Here are some other topics we'd like to tackle during the sprint:

- We've recently implemented a specialized Frisch-Newton solver to solve the Quantile Regression optimization problem. In initial benchmarks, we have found that our FN implementation is much faster than the Quantile Regression solver in scikit-learn. We want to create exhaustive benchmarking to validate our initial finding. If confirmed, our hope is to contribute the algorithm to scikit-learn! You can find an initial PR to sklearn [here](https://github.com/scikit-learn/scikit-learn/issues/31708#issuecomment-3191641341).
- We want to implement a complement to the FN estimator that works with sparse matrices. For the associate PR, see [here](https://github.com/py-econometrics/pyfixest/issues/963).
- We also have a range of "good first issues", many of which are very beginner-friendly. You can find them [here](https://github.com/py-econometrics/pyfixest/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22).
- Tooling: We'd like to set up a conda forge feed for PyFixest [issue](https://github.com/py-econometrics/pyfixest/issues/549).

Before the sprint, you can fork and clone pyfixest from [github](https://github.com/py-econometrics/pyfixest), and we explain how to set up the dev environment [here](https://py-econometrics.github.io/pyfixest/contributing.html).

If you're interested, please feel free to reach out!

### array-api-extra

Come and contribute to array-api-extra! We have [good first issues](https://github.com/data-apis/array-api-extra/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22) across the following topics:
- adding a new function, `nan_to_num`
- adding delegation to existing implementations for functions
- improving static typing annotations
- improving documentation

### Blosc2

The Blosc development team has just released a beta version of TreeStore class (https://www.blosc.org/python-blosc2/reference/tree_store.html#blosc2.TreeStore), a new way to structure Blosc2 datasets hierarchically. We will meet and try to polish rough edges, like:
* Being able to open a store with blosc2.open(), which fits better with Blosc2 philosophy
* Making sure that vlmeta works well for subtrees
* Producing a proper tutorial.

We would also like to talk on how to implement fancy indexing for NDArray type (NDArray.slice(fancy_index))


### Ultimate Notion

Come hack on [Ultimate Notion](https://ultimate-notion.com/) â€” the ultimate Python client for the planning and organisation workspace [Notion](https://www.notion.com/).
We could hack together on following topics:

* more real world [examples](https://ultimate-notion.com/latest/examples/) to get users started
* improve the docs for users and especially new contributors
* implement one of the many # ToDo comments in the code :-)
* start implementing the file upload endpoint.
* work on one of the current [issues](https://github.com/ultimate-notion/ultimate-notion/issues)
* your ideas

I am looking forward to meet you and have great time coding together.
